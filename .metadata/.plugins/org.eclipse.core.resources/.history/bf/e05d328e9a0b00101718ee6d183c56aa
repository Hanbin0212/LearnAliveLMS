// ClassMilestoneController.java
package com.lms.attendance.controller;

import com.lms.attendance.service.TeamClassMilestoneService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/class-milestones")
public class TeamClassMilestoneController {

    private final TeamClassMilestoneService classMilestoneService;

    public TeamClassMilestoneController(TeamClassMilestoneService classMilestoneService) {
        this.classMilestoneService = classMilestoneService;
    }

    // 교수용: 특정 강의실(classId)에 공통 마일스톤 등록
    @PostMapping("/{classId}")
    public ResponseEntity<String> createClassMilestones(
            @PathVariable int classId,
            @RequestBody Map<String, List<Map<String, Object>>> requestBody) {

        List<Map<String, Object>> milestonesData = requestBody.get("milestones");
        if(milestonesData == null || milestonesData.isEmpty()){
            return ResponseEntity.badRequest().body("마일스톤 데이터가 없습니다.");
        }
        try {
            classMilestoneService.createMilestones(classId, milestonesData);
            return ResponseEntity.ok("공통 마일스톤이 성공적으로 저장되었습니다.");
        } catch(Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("서버 오류 발생");
        }
    }
    
    // 학생/팀원용: 특정 강의실(classId)와 게시글(postId)에 대해 공통 마일스톤과 진행 상태 조인 조회
    @GetMapping("/{classId}/posts/{postId}")
    public ResponseEntity<List<Map<String, Object>>> getMilestonesForPost(
            @PathVariable int classId,
            @PathVariable int postId) {
        List<Map<String, Object>> milestones = classMilestoneService.getMilestonesForPost(classId, postId);
        return ResponseEntity.ok(milestones);
    }
}
